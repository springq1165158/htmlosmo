//============flex-box==============
@mixin flexbox {
    display: -webkit-box;
    display: -moz-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
  }
@mixin inline-flex {
display: -webkit-inline-box;
display: -moz-inline-box;
display: -webkit-inline-flex;
display: -ms-inline-flexbox;
display: inline-flex;
}
@mixin flex-direction($value: row) {
    @if $value == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
      -moz-box-direction: reverse;
      -moz-box-orient: horizontal;
    } @else if $value == column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
      -moz-box-direction: normal;
      -moz-box-orient: vertical;
    } @else if $value == column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
      -moz-box-direction: reverse;
      -moz-box-orient: vertical;
    } @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
      -moz-box-direction: normal;
      -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}
@mixin flex-wrap($value: nowrap) {
    // No Webkit/FF Box fallback.
    -webkit-flex-wrap: $value;
    @if $value == nowrap {
      -ms-flex-wrap: none;
    } @else {
      -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}
@mixin flex-flow($values: (row nowrap)) {
    // No Webkit/FF Box fallback.
    -webkit-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -moz-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -ms-flex-order: $int;
    order: $int;
}
@mixin flex-grow($int: 1) {
    -webkit-box-flex: $int;
    -moz-box-flex: $int;
    -webkit-flex-grow: $int;
    -ms-flex: $int;
    flex-grow: $int;
}
@mixin flex-shrink($int: 0) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex: $int;
    flex-shrink: $int;
}
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    flex-basis: $value;
}
@mixin flex($fg: 1, $fs: 0, $fb: auto) {

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;
  
    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
      $fg-boxflex: nth($fg, 1);
    }
  
    -webkit-box: $fg-boxflex;
    -moz-box: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}
@mixin justify-content($value: flex-start) {
    @if $value == flex-start {
      -webkit-box-pack: start;
      -moz-box-pack: start;
      -ms-flex-pack: start;
    } @else if $value == flex-end {
      -webkit-box-pack: end;
      -moz-box-pack: end;
      -ms-flex-pack: end;
    } @else if $value == space-between {
      -webkit-box-pack: justify;
      -moz-box-pack: justify;
      -ms-flex-pack: justify;
    } @else if $value == space-around {
      -ms-flex-pack: distribute;
    } @else {
      -webkit-box-pack: $value;
      -moz-box-pack: $value;
      -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    justify-content: $value;
}
@mixin align-items($value: stretch) {
    @if $value == flex-start {
      -webkit-box-align: start;
      -moz-box-align: start;
      -ms-flex-align: start;
    } @else if $value == flex-end {
      -webkit-box-align: end;
      -moz-box-align: end;
      -ms-flex-align: end;
    } @else {
      -webkit-box-align: $value;
      -moz-box-align: $value;
      -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    align-items: $value;
}
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    @if $value == flex-start {
      -ms-flex-item-align: start;
    } @else if $value == flex-end {
      -ms-flex-item-align: end;
    } @else {
      -ms-flex-item-align: $value;
    }
    align-self: $value;
}
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    @if $value == flex-start {
      -ms-flex-line-pack: start;
    } @else if $value == flex-end {
      -ms-flex-line-pack: end;
    } @else {
      -ms-flex-line-pack: $value;
    }
    align-content: $value;
}
//================ End flex-box=================
@mixin transitionCross($value) {
    -webkit-transition: all $value;
    -o-transition: all $value;
    transition: all $value;
}
@mixin transformScale($value) {
    -webkit-transform: scale($value);
    -ms-transform: scale($value);
    transform: scale($value);
}
@mixin positionCenter {
    position: absolute;
    content: "";
    top: 50%; 
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}
@mixin borderradius($varlue) {
    -webkit-border-radius: $varlue; 
    -moz-border-radius: $varlue; 
    border-radius: $varlue;
}
@mixin hoverNone {
    text-decoration: none!important;  
}
@mixin notDefault{
    text-decoration: none!important;
    border: none!important;
    outline: none!important;
}
@mixin osmo-transition-scale($transitionTime:.5s,$transform:1.05) {
  @include transitionCross($transitionTime);
  &:hover{
      @include transformScale($transform);
      text-decoration: none;
  }
}
@mixin osmo-gradient-bg {
    background-color: #ff900a;
    background-image: linear-gradient(to right,#ff9b0b 0,#ff8408 100%);
    background-repeat: repeat-x;
}
@mixin hover-image($color) {
  &:hover{
    >.image-color{
        opacity: 1;
    }
    >.image-title{
        color: $color;
    }
  }
}
@mixin button-osmo($text, $bg) {
    @include transitionCross(.5s);
    @include borderradius(30px);
    color: $text;
    border:solid 1px $text;
    font-size: 1.1rem;
    padding: .7rem 1rem;
    background-color: $bg;
    &:hover{
        color:$bg;
        background-color: $text;
        @include hoverNone;
    }
  }
@mixin play-button{
  background: rgba(0,0,0,.4);
  border-radius: 50%;
  color: #fff;
  border: 2px solid #fff;
  display: inline-block;
  width: 72px;
  &:before{
    display: block;
    content: '';
    padding-bottom: 100%;
    border-radius: 50%;
    background-image: url("../images/play-button.svg");
    background-size: 40%;
    background-position: center center;
    background-repeat: no-repeat;
  }
}
@mixin orange-osmo-gradient {
  background-color: #ff900a;
  background-image: -webkit-gradient(linear,left top, right top,color-stop(0, #ff9b0b),to(#ff8408));
  background-image: -webkit-linear-gradient(left,#ff9b0b 0,#ff8408 100%);
  background-image: -o-linear-gradient(left,#ff9b0b 0,#ff8408 100%);
  background-image: linear-gradient(to right,#ff9b0b 0,#ff8408 100%);
}
@mixin button-orange($padding,$fontsize) {
  color: white;
  padding:$padding;
  font-size: $fontsize;
  font-weight: 700;
  @include borderradius(60px);
  @include orange-osmo-gradient;
  -webkit-box-shadow:0 2px 4px 0 rgba(0, 0, 0, 0.5215686274509804);
  box-shadow:0 2px 4px 0 rgba(0, 0, 0, 0.5215686274509804);
}
@mixin button-orange2-hover($padding,$fontsize) {
  color: white;
  padding:$padding;
  font-size: $fontsize;
  font-weight: 700;
  @include borderradius(60px);
  @include orange-osmo-gradient;
  &:hover{
    background-color: #d67500;
    background-image:-webkit-gradient(linear,left top, right top,color-stop(0, #ff8408),to(#ff8408));
    background-image:-webkit-linear-gradient(left,#ff8408 0,#ff8408 100%);
    background-image:-o-linear-gradient(left,#ff8408 0,#ff8408 100%);
    background-image:linear-gradient(to right,#ff8408 0,#ff8408 100%);
  }
}
@mixin star($size,$url) {
  background-image: $url;
  background-size: $size;
  background-position: center;
  background-repeat: no-repeat;
  width: $size;
  height: $size;
}
@mixin bg-image($size,$url,$pos,$repeat,$width,$height) {
  background-image: $url;
  background-size: $size;
  background-position: $pos;
  background-repeat: $repeat;
  width: $width;
  height: $height;
}